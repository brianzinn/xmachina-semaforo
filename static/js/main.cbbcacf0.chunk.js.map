{"version":3,"sources":["MachinaTypes.ts","Semaforo.tsx","ScaledModelWithProgress.tsx","useMachina.ts","Automated.tsx","NextStateButtons.tsx","Manual.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TrafficLightState","TrafficLightTransition","PedestrianLightState","PedestrianLightTransition","PedestrianLightsToShow","LightStateMap","Map","Red","Amber","Green","onModelLoaded","models","console","log","Semaforo","props","scene","useScene","showDebug","debugLayer","show","loadedModel","useSceneLoader","undefined","reportProgress","scaleToDimension","receiveShadows","name","fromInstance","meshes","find","m","assignFrom","disableLighting","trafficLightState","current","direction","Vector3","Math","PI","intensity","angle","exponent","diffuse","Color3","specular","position","material","FromInts","emissiveColor","pedestrianLightsToShow","Walk","White","Black","Wait","height","ProgressFallback","sceneLoaderContext","useContext","SceneLoaderContext","loadProgress","lastProgress","progress","lengthComputable","loaded","total","rotation","center","scaleTo","width","depth","scaling","setPivotMatrix","Matrix","Translation","setPreTransformMatrix","diffuseColor","progressBarColor","specularColor","useMachina","initialState","machinaMap","subscriptionOptions","useState","machina","Machina","state","eventData","setState","useEffect","notificationType","NotificationType","All","valueFilter","observer","subscribe","start","unsubscribe","Automated","setPedestrianLightsToShow","Stop","outEdges","on","ToStop","description","nextState","onEnter","_","a","flashDuration","WAIT_DURATION_MILLIS","setTimeout","None","transition","AllowWalking","parent","isStarted","TurnGreen","ToWaiting","pedestrianLightMachina","pedestrianLightState","TurnAmber","nodeState","TurnRed","nestedMachinas","trafficLightEvent","style","padding","backgroundColor","get","event","value","old","new","antialias","adaptToDeviceRatio","canvasId","clearColor","Color4","target","alpha","beta","radius","minZ","wheelPrecision","lowerRadiusLimit","upperRadiusLimit","upperBetaLimit","Up","fallback","ChangeTransitionButton","onClick","NextStateButtons","possibleTransitions","map","t","Manual","trafficLightMachina","color","App","textAlign","to","href","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbbcacf0.chunk.js","sourcesContent":["export enum TrafficLightState {\n  Green = 'Green',\n  Amber = 'Amber',\n  Red = 'Red'\n}\n\nexport enum TrafficLightTransition {\n  TurnGreen = 'TurnGreen',\n  TurnAmber = 'TurnAmber',\n  TurnRed = 'TurnRed'\n}\n\nexport enum PedestrianLightState {\n  Walk = 'Walk',\n  Wait = 'Wait',\n  Stop = 'Stop'\n}\n\nexport enum PedestrianLightTransition {\n  AllowWalking = 'AllowWalking',\n  ToWaiting = 'ToWaiting',\n  ToStop = 'ToStop'\n}\n\nexport const LightStateMap: Map<TrafficLightState, string> = new Map([\n  [TrafficLightState.Red, '#cc3232'],\n  [TrafficLightState.Amber, '#e7b416'],\n  [TrafficLightState.Green, '#2dc937']\n]);","import React from 'react';\nimport { ILoadedModel, useSceneLoader, useScene } from \"react-babylonjs\";\n// for side-effects\nimport '@babylonjs/loaders/OBJ';\nimport '@babylonjs/inspector';\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\nimport { Vector3 } from '@babylonjs/core/Maths/math.vector';\nimport { MachinaState, Transition } from 'xmachina';\nimport { TrafficLightState, TrafficLightTransition } from './MachinaTypes';\n\n\nconst onModelLoaded = (models: ILoadedModel) => {\n  console.log(models);\n}\n\nexport enum PedestrianLightsToShow {\n  None,\n  Walk,\n  Wait\n}\n\ntype SemaforoProps = {\n  trafficLightState: MachinaState<TrafficLightState, TrafficLightTransition, Transition<TrafficLightState, TrafficLightTransition>>\n  pedestrianLightsToShow: PedestrianLightsToShow\n  showDebug: boolean\n}\n\nconst Semaforo = (props: SemaforoProps) => {\n  const scene = useScene()!;\n  if (props.showDebug) {\n    scene.debugLayer.show();\n  }\n\n  const loadedModel = useSceneLoader('models/semaforo/', 'semaforo.obj', undefined, {\n    reportProgress: true,\n    scaleToDimension: 2,\n    onModelLoaded: onModelLoaded,\n    receiveShadows: true\n  });\n\n  return (\n    <>\n      <abstractMesh name='red' fromInstance={loadedModel.meshes?.find(m => m.name === 'mesh_mm2')}>\n        <standardMaterial name='red-mat' assignFrom='material' disableLighting={props.trafficLightState.current === TrafficLightState.Red} />\n        {props.trafficLightState.current === TrafficLightState.Red &&\n          <spotLight name='red-light' direction={new Vector3(0, 0, Math.PI)} intensity={8} angle={102} exponent={5}\n              diffuse={Color3.Red()}\n              specular={Color3.Red()}\n              position={new Vector3(0, 5, 0)}\n          />\n        }\n      </abstractMesh>\n      <abstractMesh name='amber' fromInstance={loadedModel.meshes?.find(m => m.name === 'mesh_mm1' && m.material?.name==='ambar')}>\n        <standardMaterial name='amber-mat' assignFrom='material' disableLighting={props.trafficLightState.current === TrafficLightState.Amber} />\n        {props.trafficLightState.current === TrafficLightState.Amber &&\n          <spotLight name='amber-light' direction={new Vector3(0, 0, Math.PI)} intensity={8} angle={102} exponent={5}\n              diffuse={Color3.FromInts(231,180,22)}\n              specular={Color3.FromInts(231,180,22)}\n              position={new Vector3(0, 4.55, 0)}\n          />\n        }\n      </abstractMesh>\n      <abstractMesh name='green' fromInstance={loadedModel.meshes?.find(m => m.name === 'lights_Sphere.008')}>\n        <standardMaterial name='green-mat' assignFrom='material' disableLighting={props.trafficLightState.current === TrafficLightState.Green} />\n        {props.trafficLightState.current === TrafficLightState.Green &&\n          <spotLight name='green-light' direction={new Vector3(0, 0, Math.PI)} intensity={8} angle={102} exponent={5}\n              diffuse={Color3.FromInts(45,201,55)}\n              specular={Color3.FromInts(45,201,55)}\n              position={new Vector3(0, 4.1, 0)}\n          />\n        }\n      </abstractMesh>\n      <abstractMesh name='walk' fromInstance={loadedModel.meshes?.find(m => m.name === 'mesh_mm1' && m.material?.name==='go')}>\n        <standardMaterial name='walk-mat' assignFrom='material' emissiveColor={props.pedestrianLightsToShow === PedestrianLightsToShow.Walk ? Color3.White() : Color3.Black()} />\n      </abstractMesh>\n      <abstractMesh name='stop' fromInstance={loadedModel.meshes?.find(m => m.name === 'humans_Cube.007')}>\n        <standardMaterial name='stop-mat' assignFrom='material' emissiveColor={props.pedestrianLightsToShow === PedestrianLightsToShow.Wait ? Color3.White() : Color3.Black()} />\n      </abstractMesh>\n\n      <box name='traffic-base' position={new Vector3(0, 0, 0)} height={0.01} />\n    </>\n  )\n}\n\nexport default Semaforo;","import React, { useContext } from 'react'\nimport { Vector3, Matrix, Color3 } from '@babylonjs/core/Maths/math'\n\nimport { SceneLoaderContext } from 'react-babylonjs';\n\nexport type FallbackProgressType = {\n  name: string\n  scaleTo: number\n  center: Vector3,\n  rotation: Vector3\n  progressBarColor: Color3\n}\n\nexport const ProgressFallback = (props: FallbackProgressType) => {\n  const sceneLoaderContext = useContext(SceneLoaderContext);\n\n  let loadProgress = 0;\n  if (sceneLoaderContext?.lastProgress) {\n    const progress = sceneLoaderContext.lastProgress;\n    loadProgress = progress.lengthComputable\n      ? progress.loaded / progress.total\n      : progress.loaded / 10000; // TODO: provide option to input file size for proper loading.\n  }\n\n  return (\n    <transformNode name={`{props.name}-fallback-transform`} rotation={props.rotation} position={props.center}>\n      <box key='progress' name={`${props.name}-box-progress`} height={props.scaleTo / 15} width={props.scaleTo} depth={props.scaleTo / 30} scaling={new Vector3(loadProgress, 1, 1)}\n        position={new Vector3(props.scaleTo / 2, 0, props.scaleTo / 60)}\n        setPivotMatrix={[Matrix.Translation(-props.scaleTo, 0, 0)]}\n        setPreTransformMatrix={[Matrix.Translation(-props.scaleTo / 2, 0, 0)]}>\n        <standardMaterial name={`${props.name}-progress-mat`} diffuseColor={props.progressBarColor} specularColor={Color3.Black()} />\n      </box>\n      <box key='back' name={`${props.name}-box-back`} height={props.scaleTo / 15} width={props.scaleTo} depth={props.scaleTo / 30}\n        position={new Vector3(0, 0, props.scaleTo / -60)}\n      />\n    </transformNode>\n  )\n}\n","import { useEffect, useState } from 'react';\nimport { IMachina, Machina, MachinaState, NodeState, Nullable, Transition } from 'xmachina';\nimport { EventData } from 'xmachina/dist/types/subscriptions/EventData';\nimport { NotificationType } from 'xmachina';\n\nexport type SubscriptionOptions<S, T> = {\n  notificationType: NotificationType\n  valueFilter: S | T\n}\n\ntype HookState<S, E, T extends Transition<S, E>> = {\n  machina: IMachina<S, E, T>\n  state: MachinaState<S, E, T>\n  eventData: Nullable<EventData<S | E>>\n}\n\nexport function useMachina<\n  S,\n  E,\n  T extends Transition<S, E>\n>(\n  initialState: S,\n  machinaMap: Map<S, NodeState<S, E, T>>,\n  subscriptionOptions?: SubscriptionOptions<S, E>,\n  name?: string\n): [\n  IMachina<S, E, T>,\n  MachinaState<S, E, T>,\n  Nullable<EventData<S | E>>\n] {\n  const [state, setState] = useState<HookState<S, E, T>>(() => {\n    const machina = new Machina<S, E, T>(initialState, machinaMap, name);\n\n    return {\n      machina,\n      state: machina.state,\n      eventData: null\n    }\n  });\n\n  useEffect(() => {\n    const notificationType: NotificationType = subscriptionOptions === undefined ? NotificationType.All : subscriptionOptions.notificationType;\n    const valueFilter: S | E | undefined = subscriptionOptions === undefined ? undefined : subscriptionOptions.valueFilter;\n    const observer = state.machina.subscribe((eventData: EventData<S | E>) => {\n      setState({\n        machina: state.machina,\n        state: state.machina.state,\n        eventData: eventData\n      })\n    }, notificationType, valueFilter);\n    console.log('starting machina:', state.machina.name);\n    state.machina.start();\n\n    return () => {\n      state.machina.unsubscribe(observer);\n    }\n  }, []);\n\n  return [state?.machina, state.state, state.eventData];\n}","import React, { Suspense, useState, useEffect } from 'react';\nimport { Color3, Color4, Vector3 } from '@babylonjs/core/Maths/math';\nimport { Scene, Engine, SceneLoaderContextProvider } from 'react-babylonjs';\n\nimport './App.css';\nimport Semaforo, { PedestrianLightsToShow } from './Semaforo';\nimport { ProgressFallback } from './ScaledModelWithProgress';\nimport { NodeState, Transition } from 'xmachina';\nimport { useMachina } from './useMachina';\nimport { LightStateMap, PedestrianLightState, PedestrianLightTransition, TrafficLightState, TrafficLightTransition } from './MachinaTypes';\n\nconst GREEN_LIGHT_DURATION_MILLIS = 2500;\nconst AMBER_LIGHT_DURATION_MILLIS = 700;\nconst WALK_DURATION_MILLIS = 3500;\nconst WAIT_DURATION_MILLIS = 4000;\n\nconst Automated = () => {\n  const [pedestrianLightsToShow, setPedestrianLightsToShow] = useState<PedestrianLightsToShow>(PedestrianLightsToShow.Wait);\n\n  const [pedestrianLightMachina, pedestrianLightState] = useMachina<PedestrianLightState, PedestrianLightTransition, Transition<PedestrianLightState, PedestrianLightTransition>>(PedestrianLightState.Stop, new Map([\n    [\n      PedestrianLightState.Wait,\n      {\n        outEdges: [{\n          on: PedestrianLightTransition.ToStop,\n          description: 'Stop Walking',\n          nextState: PedestrianLightState.Stop\n        }],\n        onEnter: async (_, machina) => {\n          // we need to do some \"flashing here based on the timeout to stop\".\n          const flashDuration = WAIT_DURATION_MILLIS / 5;\n          setPedestrianLightsToShow(PedestrianLightsToShow.Wait);\n          setTimeout(() => {\n            setPedestrianLightsToShow(PedestrianLightsToShow.None);\n            setTimeout(() => {\n              setPedestrianLightsToShow(PedestrianLightsToShow.Wait);\n              setTimeout(() => {\n                setPedestrianLightsToShow(PedestrianLightsToShow.None);\n                setTimeout(() => {\n                  setPedestrianLightsToShow(PedestrianLightsToShow.Wait);\n                }, flashDuration)\n              }, flashDuration)\n            }, flashDuration)\n          }, flashDuration);\n          \n          setTimeout(() => {\n            machina.transition(PedestrianLightTransition.ToStop);\n          }, WAIT_DURATION_MILLIS);\n        }\n      }\n    ], [\n      PedestrianLightState.Stop,\n      {\n        outEdges: [{\n          on: PedestrianLightTransition.AllowWalking,\n          description: 'start walking',\n          nextState: PedestrianLightState.Walk\n        }],\n        onEnter: async (_, machina) => {\n          setPedestrianLightsToShow(PedestrianLightsToShow.Wait);\n          if (machina.parent === null || !machina.parent.isStarted === true) {\n            console.log(`not linked as nested machine yet (or not started ${machina.parent === null ? null : machina.parent.isStarted}'`);\n          } else {\n            await machina.parent.transition(TrafficLightTransition.TurnGreen);\n          }\n        }\n      }, \n    ], [\n      PedestrianLightState.Walk,\n      {\n        outEdges: [{\n          on: PedestrianLightTransition.ToWaiting,\n          description: 'stop walking',\n          nextState: PedestrianLightState.Wait\n        }],\n        onEnter: async (_, machina) => {\n          setPedestrianLightsToShow(PedestrianLightsToShow.Walk);\n          setTimeout(() => {\n            machina.transition(PedestrianLightTransition.ToWaiting);\n          }, WALK_DURATION_MILLIS);\n        }\n      }\n    ]\n  ]), undefined, 'pedestrian-machina')\n\n  const [_, trafficLightState, trafficLightEvent] = useMachina<TrafficLightState, TrafficLightTransition, Transition<TrafficLightState, TrafficLightTransition>>(TrafficLightState.Green, new Map<TrafficLightState, NodeState<TrafficLightState ,TrafficLightTransition, Transition<TrafficLightState, TrafficLightTransition>>>([\n    [\n      TrafficLightState.Green,\n      {\n        outEdges: [{\n          on: TrafficLightTransition.TurnAmber,\n          description: 'turn amber',\n          nextState: TrafficLightState.Amber\n        }],\n        onEnter: async (nodeState, machina) => {\n          setTimeout(() => machina.transition(TrafficLightTransition.TurnAmber), GREEN_LIGHT_DURATION_MILLIS);\n        }\n      }\n    ],\n    [\n      TrafficLightState.Amber,\n      {\n        outEdges: [{\n          on: TrafficLightTransition.TurnRed,\n          description: 'turn red',\n          nextState: TrafficLightState.Red\n        }],\n        onEnter: async (nodeState, machina) => {\n          setTimeout(() => machina.transition(TrafficLightTransition.TurnRed), AMBER_LIGHT_DURATION_MILLIS);\n        }\n      }\n    ],\n    [\n      TrafficLightState.Red,\n      {\n        outEdges: [{\n          on: TrafficLightTransition.TurnGreen,\n          description: 'turn green',\n          nextState: TrafficLightState.Green\n        }],\n        nestedMachinas: [pedestrianLightMachina],\n        onEnter: async (_, machina) => {\n          const { nestedMachinas } = machina.state;\n          setPedestrianLightsToShow(PedestrianLightsToShow.None);\n          await nestedMachinas[0].transition(PedestrianLightTransition.AllowWalking);\n        }\n      }\n    ]\n  ]), undefined, 'light-machina');\n\n  useEffect(() => {\n    console.log('Traffic light switched to:', trafficLightState.current);\n  }, [trafficLightState.current]);\n\n  return (\n    <div>\n      <p style={{padding: 6}}>\n        <h3><strong>xmachina + babylonjs</strong> (Automated)</h3>\n        <div>Light Currently: <span style={{backgroundColor: LightStateMap.get(trafficLightState.current)}}><strong>{trafficLightState.current}</strong></span></div>\n        <div>Pedestrian Currently: {pedestrianLightState.current}</div>\n        {trafficLightEvent !== null &&\n          <div>Last Traffic Light (semáforo) Event <strong>{trafficLightEvent.event}</strong> from <strong>{trafficLightEvent.value.old ?? 'n/a'}</strong> to: <strong>{trafficLightEvent.value.new}</strong>.</div>\n        }\n      </p>\n      <Engine antialias adaptToDeviceRatio canvasId='babylonJS'>\n        <Scene clearColor={new Color4(0.2, 0.4, 0.75, 1.0)}>\n          <arcRotateCamera name=\"arc\" target={new Vector3(0, 1, 0)}\n            alpha={7 * Math.PI / 8} beta={3 * Math.PI/8}\n            radius={3} minZ={0.001} wheelPrecision={50}\n            lowerRadiusLimit={0.25} upperRadiusLimit={8} upperBetaLimit={Math.PI / 2}\n          />\n          <hemisphericLight name='hemi' direction={Vector3.Up()} intensity={0.8} />\n          <SceneLoaderContextProvider>\n            <Suspense fallback={<ProgressFallback name='lights-fallback' progressBarColor={Color3.Red()} rotation={new Vector3(0, -3 * Math.PI / 8, 0)} center={new Vector3(0, 0.75, 0)} scaleTo={1} />}>\n              <Semaforo trafficLightState={trafficLightState} pedestrianLightsToShow={pedestrianLightsToShow} showDebug={false} />\n            </Suspense>\n          </SceneLoaderContextProvider>\n        </Scene>\n      </Engine>\n    </div>\n  );\n}\n\nexport default Automated;\n","import React from 'react';\nimport { IMachina, Transition } from 'xmachina';\nimport { LightStateMap } from './MachinaTypes';\n\ntype ChangeTransitionButtonProps<S, E> = {\n  machina: IMachina<S, E, Transition<S, E>>\n  transition: Transition<S, E>\n}\n\nexport const ChangeTransitionButton: React.FC<ChangeTransitionButtonProps<any, any>> = (props: ChangeTransitionButtonProps<any, any>) => {\n  const onButtonClick = () => props.machina.transition(props.transition.on);\n  return (\n    <button onClick={onButtonClick} style={{backgroundColor: LightStateMap.get(props.transition.nextState)}}>click here to {props.transition.description ?? props.transition.on}</button>\n  )\n}\n\ntype NextStateButtonsProps = {\n  machina: IMachina<any, any, Transition<any, any>>\n}\n\nexport const NextStateButtons: React.FC<NextStateButtonsProps> = (props: NextStateButtonsProps) => {\n  return (<>\n  {\n    props.machina.state.possibleTransitions.map((t: Transition<any, any>) =>\n      <ChangeTransitionButton machina={props.machina} transition={t} />\n    )\n  }\n  </>);\n}","import React, { Suspense } from 'react';\nimport { Color3, Color4, Vector3 } from '@babylonjs/core/Maths/math';\nimport { Scene, Engine, SceneLoaderContextProvider } from 'react-babylonjs';\n\nimport './App.css';\nimport Semaforo, { PedestrianLightsToShow } from './Semaforo';\nimport { ProgressFallback } from './ScaledModelWithProgress';\nimport { Transition } from 'xmachina';\nimport { useMachina } from './useMachina';\nimport { LightStateMap, TrafficLightState, TrafficLightTransition } from './MachinaTypes';\nimport { NextStateButtons } from './NextStateButtons';\n\nconst Manual = () => {\n  const [trafficLightMachina, trafficLightState, trafficLightEvent] = useMachina<TrafficLightState, TrafficLightTransition, Transition<TrafficLightState, TrafficLightTransition>>(TrafficLightState.Green, new Map([\n    [\n      TrafficLightState.Green,\n      {\n        outEdges: [{\n          on: TrafficLightTransition.TurnAmber,\n          description: 'turn amber',\n          nextState: TrafficLightState.Amber\n        }],\n      }\n    ],\n    [\n      TrafficLightState.Amber,\n      {\n        outEdges: [{\n          on: TrafficLightTransition.TurnRed,\n          description: 'turn red',\n          nextState: TrafficLightState.Red\n        }],\n      }\n    ],\n    [\n      TrafficLightState.Red,\n      {\n        outEdges: [{\n          on: TrafficLightTransition.TurnGreen,\n          description: 'turn green',\n          nextState: TrafficLightState.Green\n        }]\n      }\n    ]\n  ]));\n\n  return (\n    <div>\n      <p style={{padding: 6}}>\n        <h3><strong>xmachina + babylonjs</strong> (Manual)</h3>\n        <div>Light Currently: <span style={{color: LightStateMap.get(trafficLightState.current)}}>{trafficLightState.current}</span></div>\n        <NextStateButtons machina={trafficLightMachina} />\n        {trafficLightEvent !== null &&\n          <div>Last Event <strong>{trafficLightEvent.event}</strong> from <strong>{trafficLightEvent.value.old ?? 'n/a'}</strong> to: <strong>{trafficLightEvent.value.new}</strong>.</div>\n        }\n      </p>\n      <Engine antialias adaptToDeviceRatio canvasId='babylonJS'>\n        <Scene clearColor={new Color4(0.2, 0.4, 0.75, 1.0)}>\n          <arcRotateCamera name=\"arc\" target={new Vector3(0, 1, 0)}\n            alpha={7 * Math.PI / 8} beta={3 * Math.PI/8}\n            radius={3} minZ={0.001} wheelPrecision={50}\n            lowerRadiusLimit={0.25} upperRadiusLimit={8} upperBetaLimit={Math.PI / 2}\n          />\n          <hemisphericLight name='hemi' direction={Vector3.Up()} intensity={0.8} />\n          <SceneLoaderContextProvider>\n            <Suspense fallback={<ProgressFallback name='lights-fallback' progressBarColor={Color3.Red()} rotation={new Vector3(0, -3 * Math.PI / 8, 0)} center={new Vector3(0, 0.75, 0)} scaleTo={1} />}>\n              <Semaforo trafficLightState={trafficLightState} pedestrianLightsToShow={trafficLightState.current === TrafficLightState.Red ? PedestrianLightsToShow.Walk : PedestrianLightsToShow.Wait} showDebug={false} />\n            </Suspense>\n          </SceneLoaderContextProvider>\n        </Scene>\n      </Engine>\n    </div>\n  );\n}\n\nexport default Manual;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport './App.css';\nimport Automated from './Automated';\nimport Manual from './Manual';\n\nconst App = () => {\n\n  return (\n    <Router>\n      <div style={{width: '100vw', height: '100vh', textAlign: 'center'}}>\n        <nav>\n            Choose: <Link to=\"/\">Automated</Link> <strong>OR </strong><Link to=\"/manual\">Manual</Link> xmachina (<a href='https://github.com/brianzinn/xmachina'>github.com/brianzinn/xmachina</a>).\n        </nav>\n        <Switch>\n          <Route path=\"/manual\">\n            <Manual />\n          </Route>\n          <Route path=\"/\">\n            <Automated />\n          </Route>\n        </Switch>\n      \n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}